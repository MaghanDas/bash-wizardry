lecture--1
**********
mkdir, cd, cd.., rm directoryName, 
cat > file.txt
cat file.txt
echo hello
echo hello >hello.txt
echo -e "name\tgrade\tcountry" >students.txt   // e is escape sequence
echo -e "jack\tA]tpakistan" >> students.txt  // this way we can add this data to the above file by just using >>

who -> all
who am i

man commNDnAME -> THIS will help understanding about that command.
cd / -> return to home directory.

permissions.
la -l -> checking all files permission data
chmod u-w students.txt -> taking/deleting write permission from user on students.txt file so then you can't read in file
to give back permission
chmod u+w students.txt 

-> more on Linux permissions.
Read      r  4
Write     w  2
Execute   x  1
None      -  0

-> Linux users
users      u
group      gz
others     o

-> command
ls -l = shows permission
chmod = changing permission

examples : ls -l fruits.txt // shows permission on fruit file.
-rw-r--r--1   (- in begining shows that its file)
rw-= user permission 
r-- = group permission
r-- = other permission
// let's give other write and execute permissions as well.
chmod o+wx fruits.txt -> o means others +wx mean giving writing & execution permission. (we put - if don't give permissions )

-------------------------- 
stat filename.. shows the stat of the file.

// sending files to elte's server from local machine.
create file.
// use following command
scp filename.txt ccq946@comsys.inf.elte.hu:/afa/inf.elte.hu/user/c/cc/ccq946

"C:\Users\Rajoo Menghwar\logo.jpg"

// sleep 3000
to stop sleep- ctrol c 

// find command.
// 

// editors
mcedit file.txt
nano file.txt
vi country.txt

// to come out 
escape :w

// sleep - processors
ps -> shows all proceses
ps -aux -> more details
sleep 3500 & (running in background)

jobs -> shows all processes
kill (piDnumber) -> process removed.
killall sleep -> running process removed


- > working with zip
ssh [username]@[server-address]   # Log in
cd /path/to/your/txt/files/       # Navigate to your directory
zip all_txt_files.zip *.txt       # Create a zip file
unzip all_txt_files.zip           # Unzip the file
ls                                  # List files to verify extraction



-> variables
variablename=value
read varibalesname // taking userinput
user=$(whoami) -> whoami command 

name=$1 // command line arugements
compilemnt=$2
echo "good morning $name, $compliment"

-> conditionals
read -p "enter two numbers :" num1 num2 //reading two arguments at once.

// if conditionals : there should be space between[ condtion ];
if [ $num1 -gt $num2 ]; then 
 echo "$num1 is greater than $num2"
elif [ condition ]; then
  statement
else 
echo "statemenet any"
fi // end of if statement

// loops in bash
// for loop -> used for iterating over a sequence
for i in {1..5}; do
   echo "numbers : $i"
done

// while loop -> runs until a condition becomes false
count=1
while[ $count -le 5 ]; 
     echo "number: $count"
count=$((count+1))
done

// until loop -> runs until a condition becomes true
count=1
until [ $count -gt 5 ]; do
  echo "number : $count"
count=$((count+1))
done

----------------
from 15th oct
----------------
filters in bash

head -n 5 file.txt  # Show the first 5 lines of file.txt
tail -n 5 file.txt  # Show the last 5 lines of file.txt
tail -f file.txt    # Follow the output of file.txt in real-time

bash scriptfile.txt number.txt 2 # taking file as parameter and the printing head and tail for 2
in vi editor
shebang
{
cat $1 | head -n $2
cat $1 | tail -n $2
} sort -n -r | more  #reverse sorting 
#more command is used for paging when we have large data.


grep "error" log.txt  # Find lines containing "error" in log.txt
grep -i "hello" file.txt  # Case-insensitive search for "hello" in file.txt

wc -l file.txt  # Count lines in file.txt
wc -w file.txt  # Count words in file.txt
wc -c file.txt  # Count characters in file.txt

echo "Lines: `cat $1 | wc -l`"
echo "words: `cat $1 | wc -w`"
echo "char: `cat $1 | wc -m`"
echo "Total files: `ls | wc -l`"
echo "Folders: `ls -l | grep ^d | wc -l`"
echo "Shell files: `ls -l | grep "\.sh" | wc -l`"
echo "Text files: `ls -l | grep "\.txt" | wc -l`"
echo "spaces : `cat $1 | grep -o " " | wc -l`"

who | wc-l # total users 
who | sort | cut -f1 -d " " | uniq | wc -l #uniq users
who | sort | awk '{print $1}' | uniq | wc -l #uniq users
 
sort file.txt     # Sort lines alphabetically
sort -n numbers.txt  # Sort lines numerically
sort -r file.txt  # Sort lines in reverse order

# Count total files and subdirectories and save as the 1st line
(ls -1 | wc -l) | tee output.txt

# Count only subdirectories and append as the 2nd line
(ls -l | grep '^d' | wc -l) | tee -a output.txt



cut -d "," -f 1,3 file.csv  # Extract the 1st and 3rd columns, assuming comma-delimited
cut -c 1-5 file.txt  # Extract characters 1 through 5 from each line

echo "Hello World" | tee file.txt  # Writes "Hello World" to both the terminal and file.txt

sort file.txt | uniq  # Display unique lines in file.txt
uniq -c sorted_file.txt  # Show counts of each line in sorted_file.txt


getend passwd | wc -l # get and count total elte users.

cat number.txt | sort -n -r > a.txt # will not print the content
cat number.txt | sort -n -r | tee b.txt # will print the content as well/

echo hello | tr a-z A-Z #change to uppercase
echo "hello()sir" | tr "()" "[]" # will print hello[]sir

#compare numbers based on the range
if test $1 -gt 10
then 
echo "$1 is greater than 10"
else
if test $1 -lt 5
then 
echo "$1 is less than 5"
else
echo "$1 is in between 5 and 10"
fi
fi

# we can used test or [] . both are same

$# -> check total number of arguements ( used while input file validations)

echo 123 | grep "^[0-9]\+$"  #patterns matching

h=`date +%H` #give current time hour
echo $h

cases in bash
----
case $1 in
	-d)
	date
	;;
	-lst)
	ls
	;;
	-wh)
	who
	;;
	)
	echo "SELECT (-d or -lst or -wh)"
	;;
esac

-- loops in bash
for loop
---
for user $(seq 5)
do 
echo elte
done
# elte willbe printed 5 times

#sending greetings msg to all users at the moment
for nid in `who | awk '{print $1}'`
do
     user=`finger ccq946 | head -1 | awk '{print $4 " " $5}'`
echo "greetings $user"
done

-> finger ccq946 #taking user full name and information
finger ccq946 | head -1 | awk '{print $4 " " $5}'
finger ccq946 | head -3 | tail -1 | awk '/from/ {print NF}' #printing the ip address of user ccq946

-> 22 oct

-> while and untill loop sum program
echo "enter N"
read number

sum=0
count=0

while test $count -lt $number
#until test $count -ge $number

do 
        echo "Enter a number"	
 	read n	
	sum=$((sum+n))
	((count++))
	#count=`expr $count + 1`
done
	echo "sum : $sum"


#factorial of a number

fact=1
for((number=1;number<=$1;number++))
do
	fact=$((fact*number)) 
done
echo "factorial of $1 : $fact"

task: extracting good email from raw mail
example: abcatinfodoteltedothu
cat email.txt | sed 's/at/@/g;s/dot/\./g'
output: abc@info.elte.hu
abc@info.elte.hu $1 | tee good.txt #inside file if

#calculating avg

sum=0
count=0

while read n
do 
	sum=$((sum+n))
	((count++))
done < $1 

avg=$(echo "scale=2; $sum / $count" | bc )
echo "AVG: $avg"

->arrays in bash
name=(hello sir how are you)
echo ${name[*]} #hello sir how are you

cat number.txt | sed 's/\([0-9]\)\([0-9]\)/\2\1/'

#above command will number from 50 to 05 

Example: Handling File Input and Argument Checks in a Script

#!/bin/bash

# Check if the user provided exactly one argument
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 filename"
    exit 1
fi

# Check if the file exists
if [ -f "$1" ]; then
    echo "Processing file $1..."
    # Do something with the file
else
    echo "File $1 does not exist."
    exit 1
fi
*******************************************

if [ -z "$1" ]; then
    echo "No argument supplied!"
else
    echo "Argument supplied: $1"
fi

